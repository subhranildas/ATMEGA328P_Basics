
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000002ce  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800154  00800154  000003b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ab  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000707  00000000  00000000  00000e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042b  00000000  00000000  0000154a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040f  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e2  00000000  00000000  00001f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002431  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_1>
   8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 37       	cpi	r26, 0x77	; 119
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  9e:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
}
void USART_Write_float(float val){
	char arr[20];
	sprintf(arr,"%f",val);
	USART_Write(arr);
}
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  ae:	88 e9       	ldi	r24, 0x98	; 152
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  ba:	08 95       	ret

000000bc <USART_Transmit>:
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <USART_Transmit+0x4>
  c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  ca:	08 95       	ret

000000cc <USART_Write>:
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
  d2:	88 81       	ld	r24, Y
  d4:	88 23       	and	r24, r24
  d6:	31 f0       	breq	.+12     	; 0xe4 <USART_Write+0x18>
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
  de:	89 91       	ld	r24, Y+
  e0:	81 11       	cpse	r24, r1
  e2:	fb cf       	rjmp	.-10     	; 0xda <USART_Write+0xe>
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <__vector_18>:

ISR(USART_RX_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	rx_data = UDR0;
 102:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 106:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <rx_data>
	if(count == count_max) count = 0;
 10a:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <__data_end>
 10e:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <__data_end+0x1>
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 11a:	48 17       	cp	r20, r24
 11c:	59 07       	cpc	r21, r25
 11e:	21 f4       	brne	.+8      	; 0x128 <__vector_18+0x3e>
 120:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__data_end+0x1>
 124:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
	rx_buffer[count] = rx_data;
 128:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 12c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
 130:	fc 01       	movw	r30, r24
 132:	ea 5a       	subi	r30, 0xAA	; 170
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	20 83       	st	Z, r18
	count++;
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x1>
 13e:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <INIT_EXTI0>:
    }
}

void INIT_EXTI0(bool rising, bool falling){
	
	if(rising == true && falling == true){
 15a:	88 23       	and	r24, r24
 15c:	a1 f0       	breq	.+40     	; 0x186 <INIT_EXTI0+0x2c>
 15e:	66 23       	and	r22, r22
 160:	49 f0       	breq	.+18     	; 0x174 <INIT_EXTI0+0x1a>
		EICRA |= (1<<ISC00);
 162:	e9 e6       	ldi	r30, 0x69	; 105
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	80 83       	st	Z, r24
		EICRA &= ~(1<<ISC01);
 16c:	80 81       	ld	r24, Z
 16e:	8d 7f       	andi	r24, 0xFD	; 253
 170:	80 83       	st	Z, r24
 172:	1e c0       	rjmp	.+60     	; 0x1b0 <INIT_EXTI0+0x56>
	}
	else if(rising == true && falling == false){
		EICRA |= (1<<ISC00);
 174:	e9 e6       	ldi	r30, 0x69	; 105
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24
		EICRA |= (1<<ISC01);
 17e:	80 81       	ld	r24, Z
 180:	82 60       	ori	r24, 0x02	; 2
 182:	80 83       	st	Z, r24
 184:	15 c0       	rjmp	.+42     	; 0x1b0 <INIT_EXTI0+0x56>
		
	}
	else if(rising == false && falling == true){
 186:	66 23       	and	r22, r22
 188:	51 f0       	breq	.+20     	; 0x19e <INIT_EXTI0+0x44>
		EICRA &= ~(1<<ISC00);
 18a:	e9 e6       	ldi	r30, 0x69	; 105
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	80 83       	st	Z, r24
		EICRA |= (1<<ISC01);
 194:	80 81       	ld	r24, Z
 196:	82 60       	ori	r24, 0x02	; 2
 198:	80 83       	st	Z, r24
		PORTD |= (1<<PORTD2);
 19a:	5a 9a       	sbi	0x0b, 2	; 11
 19c:	09 c0       	rjmp	.+18     	; 0x1b0 <INIT_EXTI0+0x56>
	}
	else{
		/* ANY LOW LABEL CAUSES AN INTERRUPT */
		EICRA &= ~(1<<ISC00);
 19e:	e9 e6       	ldi	r30, 0x69	; 105
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	8e 7f       	andi	r24, 0xFE	; 254
 1a6:	80 83       	st	Z, r24
		EICRA &= ~(1<<ISC01);
 1a8:	80 81       	ld	r24, Z
 1aa:	8d 7f       	andi	r24, 0xFD	; 253
 1ac:	80 83       	st	Z, r24
		PORTD |= (1<<PORTD2);
 1ae:	5a 9a       	sbi	0x0b, 2	; 11
	}
	
	EIMSK |= (1<<INT0);
 1b0:	e8 9a       	sbi	0x1d, 0	; 29
 1b2:	08 95       	ret

000001b4 <INIT_EXTI1>:
}

void INIT_EXTI1(bool rising, bool falling){
	if(rising == true && falling == true){
 1b4:	88 23       	and	r24, r24
 1b6:	a1 f0       	breq	.+40     	; 0x1e0 <INIT_EXTI1+0x2c>
 1b8:	66 23       	and	r22, r22
 1ba:	49 f0       	breq	.+18     	; 0x1ce <INIT_EXTI1+0x1a>
		EICRA |= (1<<ISC10);
 1bc:	e9 e6       	ldi	r30, 0x69	; 105
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	80 83       	st	Z, r24
		EICRA &= ~(1<<ISC11);
 1c6:	80 81       	ld	r24, Z
 1c8:	87 7f       	andi	r24, 0xF7	; 247
 1ca:	80 83       	st	Z, r24
 1cc:	1e c0       	rjmp	.+60     	; 0x20a <INIT_EXTI1+0x56>
	}
	else if(rising == true && falling == false){
		EICRA |= (1<<ISC10);
 1ce:	e9 e6       	ldi	r30, 0x69	; 105
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	80 83       	st	Z, r24
		EICRA |= (1<<ISC11);
 1d8:	80 81       	ld	r24, Z
 1da:	88 60       	ori	r24, 0x08	; 8
 1dc:	80 83       	st	Z, r24
 1de:	15 c0       	rjmp	.+42     	; 0x20a <INIT_EXTI1+0x56>
		
	}
	else if(rising == false && falling == true){
 1e0:	66 23       	and	r22, r22
 1e2:	51 f0       	breq	.+20     	; 0x1f8 <INIT_EXTI1+0x44>
		EICRA &= ~(1<<ISC10);
 1e4:	e9 e6       	ldi	r30, 0x69	; 105
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	80 83       	st	Z, r24
		EICRA |= (1<<ISC11);
 1ee:	80 81       	ld	r24, Z
 1f0:	88 60       	ori	r24, 0x08	; 8
 1f2:	80 83       	st	Z, r24
		PORTD |= (1<<PORTD3);
 1f4:	5b 9a       	sbi	0x0b, 3	; 11
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <INIT_EXTI1+0x56>
	}
	else{
		/* ANY LOW LABEL CAUSES AN INTERRUPT */
		EICRA &= ~(1<<ISC10);
 1f8:	e9 e6       	ldi	r30, 0x69	; 105
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	8b 7f       	andi	r24, 0xFB	; 251
 200:	80 83       	st	Z, r24
		EICRA &= ~(1<<ISC11);
 202:	80 81       	ld	r24, Z
 204:	87 7f       	andi	r24, 0xF7	; 247
 206:	80 83       	st	Z, r24
		PORTD |= (1<<PORTD3);
 208:	5b 9a       	sbi	0x0b, 3	; 11
	}
	
	EIMSK |= (1<<INT1);
 20a:	e9 9a       	sbi	0x1d, 1	; 29
 20c:	08 95       	ret

0000020e <main>:
// As low level interrupt does not require clock use it for wake up from sleep mode cases
/*	-----------------------	*/

int main(void)
{
	sei();											// Enable global interrupt
 20e:	78 94       	sei
	USART_Init(MYUBRR);								// USART Enabled 
 210:	80 e1       	ldi	r24, 0x10	; 16
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
    INIT_EXTI0(true,false);							// Rising edge interrupt enabled External pull down required
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 ad 00 	call	0x15a	; 0x15a <INIT_EXTI0>
	INIT_EXTI1(false,true);							// Falling edge interrupt enabled Internal pull up is enabled in software
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 da 00 	call	0x1b4	; 0x1b4 <INIT_EXTI1>
	
	USART_Write("Interrupt Test Ready >>>> \n");
 228:	88 e0       	ldi	r24, 0x08	; 8
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 66 00 	call	0xcc	; 0xcc <USART_Write>
 230:	ff cf       	rjmp	.-2      	; 0x230 <main+0x22>

00000232 <__vector_1>:
	EIMSK |= (1<<INT1);
}


// INTERRUPT 0 VECT
ISR(INT0_vect){
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
	USART_Write("Interrupt 0 triggered \n");
 254:	84 e2       	ldi	r24, 0x24	; 36
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 66 00 	call	0xcc	; 0xcc <USART_Write>
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_2>:
// INTERRUPT 1 VECT
ISR(INT1_vect){
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
	USART_Write("Interrupt 1 triggered \n");
 2a0:	8c e3       	ldi	r24, 0x3C	; 60
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 66 00 	call	0xcc	; 0xcc <USART_Write>
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
